//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GumpCompiler {
    using System;
    
    
    public partial class PropertyT4 : PropertyT4Base {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 2 "PropertyT4.tt"
 
var gump = this.Session["gump"] as gump;
var path = this.Session["path"] as string; 
var property = this.Session["property"] as Property; 
var entities = property.EntitiesOfProperty (gump);

            
            #line default
            #line hidden
            
            #line 8 "PropertyT4.tt"
            this.Write("// ------------------------------------------------------------------------------" +
                    "\n//  <autogenerated>\n//      This code was generated by tool ");
            
            #line default
            #line hidden
            
            #line 10 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GumpCompiler.Version.Name ));
            
            #line default
            #line hidden
            
            #line 10 "PropertyT4.tt"
            this.Write(" v");
            
            #line default
            #line hidden
            
            #line 10 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GumpCompiler.Version.Number ));
            
            #line default
            #line hidden
            
            #line 10 "PropertyT4.tt"
            this.Write(".\n//      Changes to this file may cause incorrect behavior and will be lost if \n" +
                    "//      the code is regenerated.\n//  </autogenerated>\n// -----------------------" +
                    "-------------------------------------------------------\n#ifndef ");
            
            #line default
            #line hidden
            
            #line 15 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( gump.model.@namespace.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 15 "PropertyT4.tt"
            this.Write("_GENERATED_BY_GUMP_");
            
            #line default
            #line hidden
            
            #line 15 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 15 "PropertyT4.tt"
            this.Write("_H\n#define ");
            
            #line default
            #line hidden
            
            #line 16 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( gump.model.@namespace.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 16 "PropertyT4.tt"
            this.Write("_GENERATED_BY_GUMP_");
            
            #line default
            #line hidden
            
            #line 16 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 16 "PropertyT4.tt"
            this.Write("_H\n\n#include \"ArcGeoSim/Physics/Gump/Property.h\"\n#include \"");
            
            #line default
            #line hidden
            
            #line 19 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( path ));
            
            #line default
            #line hidden
            
            #line 19 "PropertyT4.tt"
            this.Write("/Properties/PropertyKind.h\"\n");
            
            #line default
            #line hidden
            
            #line 20 "PropertyT4.tt"
 
foreach(var e in entities) { 

            
            #line default
            #line hidden
            
            #line 23 "PropertyT4.tt"
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 23 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( path ));
            
            #line default
            #line hidden
            
            #line 23 "PropertyT4.tt"
            this.Write("/Entities/");
            
            #line default
            #line hidden
            
            #line 23 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( e.name ));
            
            #line default
            #line hidden
            
            #line 23 "PropertyT4.tt"
            this.Write(".h\"\n");
            
            #line default
            #line hidden
            
            #line 24 "PropertyT4.tt"
 
} 

            
            #line default
            #line hidden
            
            #line 27 "PropertyT4.tt"
            this.Write("\nnamespace ");
            
            #line default
            #line hidden
            
            #line 28 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( gump.model.@namespace ));
            
            #line default
            #line hidden
            
            #line 28 "PropertyT4.tt"
            this.Write(" {\n  \n  struct ");
            
            #line default
            #line hidden
            
            #line 30 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 30 "PropertyT4.tt"
            this.Write(" \n    : public Gump::PropertyT<Gump::e");
            
            #line default
            #line hidden
            
            #line 31 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Dim() ));
            
            #line default
            #line hidden
            
            #line 31 "PropertyT4.tt"
            this.Write(", Arcane::");
            
            #line default
            #line hidden
            
            #line 31 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Type() ));
            
            #line default
            #line hidden
            
            #line 31 "PropertyT4.tt"
            this.Write(">\n  {\n    using Base = Gump::PropertyT<Gump::e");
            
            #line default
            #line hidden
            
            #line 33 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Dim() ));
            
            #line default
            #line hidden
            
            #line 33 "PropertyT4.tt"
            this.Write(", Arcane::");
            
            #line default
            #line hidden
            
            #line 33 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Type() ));
            
            #line default
            #line hidden
            
            #line 33 "PropertyT4.tt"
            this.Write(">;\n\n    explicit ");
            
            #line default
            #line hidden
            
            #line 35 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 35 "PropertyT4.tt"
            this.Write("(const Base& e) \n      : Base(e) {} \n  \n    explicit ");
            
            #line default
            #line hidden
            
            #line 38 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 38 "PropertyT4.tt"
            this.Write("(const Gump::Property& e) \n      : Base(e) {} \n\n    explicit ");
            
            #line default
            #line hidden
            
            #line 41 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 41 "PropertyT4.tt"
            this.Write("(const Gump::Entity& e) \n      : Base(");
            
            #line default
            #line hidden
            
            #line 42 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Kind () ));
            
            #line default
            #line hidden
            
            #line 42 "PropertyT4.tt"
            this.Write(", e) {} \n\n");
            
            #line default
            #line hidden
            
            #line 44 "PropertyT4.tt"
 
foreach(var entity in entities) { 

            
            #line default
            #line hidden
            
            #line 47 "PropertyT4.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 47 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 47 "PropertyT4.tt"
            this.Write("(const ");
            
            #line default
            #line hidden
            
            #line 47 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.name ));
            
            #line default
            #line hidden
            
            #line 47 "PropertyT4.tt"
            this.Write("& e) \n      : Base(");
            
            #line default
            #line hidden
            
            #line 48 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Kind () ));
            
            #line default
            #line hidden
            
            #line 48 "PropertyT4.tt"
            this.Write(", e) {} \n\n    ");
            
            #line default
            #line hidden
            
            #line 50 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name ));
            
            #line default
            #line hidden
            
            #line 50 "PropertyT4.tt"
            this.Write("(const Gump::EnumeratorT<");
            
            #line default
            #line hidden
            
            #line 50 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.name ));
            
            #line default
            #line hidden
            
            #line 50 "PropertyT4.tt"
            this.Write(">& e) \n      : Base(");
            
            #line default
            #line hidden
            
            #line 51 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.Kind () ));
            
            #line default
            #line hidden
            
            #line 51 "PropertyT4.tt"
            this.Write(", *e) {} \n      \n");
            
            #line default
            #line hidden
            
            #line 53 "PropertyT4.tt"
 
} 

            
            #line default
            #line hidden
            
            #line 56 "PropertyT4.tt"
            this.Write("  };\n  \n} \n\n#endif /* ");
            
            #line default
            #line hidden
            
            #line 60 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( gump.model.@namespace.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 60 "PropertyT4.tt"
            this.Write("_GENERATED_BY_GUMP_");
            
            #line default
            #line hidden
            
            #line 60 "PropertyT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( property.name.ToUpper() ));
            
            #line default
            #line hidden
            
            #line 60 "PropertyT4.tt"
            this.Write("_H */\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class PropertyT4Base {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
